#include <iostream>
#include <string>
using namespace std;

class User {
private:
    string username;
    string password;

public:
    User(string username, string password) : username(username), password(password) {}

    ~User() {}

    string getUsername() const { return username; }
    string getPassword() const { return password; }
};

class Book {
private:
    string title;
    string author;
    string category;
    string isbn;
    int yearPublished;
    double price;

public:
    Book(string title, string author, string category, string isbn, int yearPublished, double price) 
        : title(title), author(author), category(category), isbn(isbn), yearPublished(yearPublished), price(price) {}

    ~Book() {}

    string getTitle() const { return title; }
    string getAuthor() const { return author; }
    string getCategory() const { return category; }
    string getISBN() const { return isbn; }
    int getYearPublished() const { return yearPublished; }
    double getPrice() const { return price; }

    void displayDetails() const {
        cout << "Title: " << title << endl;
        cout << "Author: " << author << endl;
        cout << "Category: " << category << endl;
        cout << "ISBN: " << isbn << endl;
        cout << "Year Published: " << yearPublished << endl;
        cout << "Price: $" << price << endl;
    }
};

class BookManager {
private:
    static const int MAX_BOOKS = 100;
    Book* books[MAX_BOOKS];
    int numBooks;

public:
    BookManager() : numBooks(0) {}

    ~BookManager() {
        for (int i = 0; i < numBooks; ++i) {
            delete books[i];
        }
    }

    void addBook(const Book& book) {
        if (numBooks < MAX_BOOKS) {
            books[numBooks] = new Book(book);
            ++numBooks;
        } else {
            cerr << "Cannot add more books. Maximum capacity reached." << endl;
        }
    }

    void listAllBooks() const {
        cout << "Listing all books:" << endl;
        for (int i = 0; i < numBooks; ++i) {
            books[i]->displayDetails();
            cout << endl;
        }
    }

    Book* getBookByISBN(const std::string& isbn) {
        for (int i = 0; i < numBooks; ++i) {
            if (books[i]->getISBN() == isbn) {
                return books[i];
            }
        }
        return nullptr;
    }
};

class RatingAndReview {
private:
    string username;
    string bookTitle;
    int rating;
    string review;

public:

    RatingAndReview(string username, string bookTitle, int rating, string review)
        : username(username), bookTitle(bookTitle), rating(rating), review(review) {}


    ~RatingAndReview() {}


    string getUsername() const { return username; }
    string getBookTitle() const { return bookTitle; }
    int getRating() const { return rating; }
    string getReview() const { return review; }
};

class NotificationSystem {
public:

    static void sendNotificationToUser(const string& username, const string& message) {
        cout << "Notification for " << username << ": " << message << endl;
    }
};

